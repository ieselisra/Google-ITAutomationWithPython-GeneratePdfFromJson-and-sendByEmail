#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails
import os


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])

# Creates/ Updates a List (Dictionary) with the sales
sales_list ={}
def calculate_most_popular(car, total_sales):
    if(car["car_year"] in sales_list):
        sales_list[car["car_year"]]=sales_list[car["car_year"]]+total_sales
    else:
        sales_list[car["car_year"]]=total_sales

# Finds on the list the "trend year"
def find_most_popular_carYear():
    key=''
    valueTemp=0
    for k in sales_list:
        if(sales_list[k]>valueTemp):
            key = k
            valueTemp = sales_list[k]
    return "The most popular year was "+str(key)+" with "+str(valueTemp)+" sales."

def process_data(data):
  """Analyzes the data, looking for maximums.
  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  most_sales = {"total_sales": 0}

  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    # TODO: also handle max sales
    item_timesSold = item["total_sales"]
    if item_timesSold > most_sales["total_sales"]:
      most_sales = item

    # TODO: also handle most popular car_year
    calculate_most_popular(item["car"],item["total_sales"])

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(
      format_car(most_sales["car"]), most_sales["total_sales"]),
    find_most_popular_carYear()
  ]


  return summary

# Creates a Table from the JSON Object (List of lists)
def carsJson_to_table(data_json):
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in data_json:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data

# Creates a PDF
def pdf_generator(summary,data):
    table_data=carsJson_to_table(data)
    result=''
    for line in summary:
      result=result+line+'<br/>'
    reports.generate("/tmp/cars.pdf", "Sales Summary for last month",result,table_data )
    print("PDF Report generated.")

# Send Mail using "emails"
def email_send_report(summary, sender, receiverT, subject):
    receiver = "{}@example.com".format(receiverT)
    body = '\n'.join(summary)
    message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
    emails.send(message)
    print("eMail '", subject , "'' sent. From : ", sender, " TO: ", receiver)

def main(argv):
  # Load the JSON and Process it to create the Summary
  data = load_data("car_sales.json")
  summary = process_data(data)

  # Generate PDF (as /tmp/cars.pdf)
  pdf_generator(summary, data)

  # Send the PDF report as an email attachment
  email_send_report(summary, "automation@example.com", os.environ.get('USER'), "Sales summary for last month")

if __name__ == "__main__":
  main(sys.argv)
